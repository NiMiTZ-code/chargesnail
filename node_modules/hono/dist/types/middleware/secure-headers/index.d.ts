import type { Context } from '../../context';
import type { MiddlewareHandler } from '../../types';
declare module '../../context' {
    interface ContextVariableMap {
        secureHeadersNonce?: string;
    }
}
export type ContentSecurityPolicyOptionHandler = (ctx: Context, directive: string) => string;
type ContentSecurityPolicyOptionValue = (string | ContentSecurityPolicyOptionHandler)[];
interface ContentSecurityPolicyOptions {
    defaultSrc?: ContentSecurityPolicyOptionValue;
    baseUri?: ContentSecurityPolicyOptionValue;
    childSrc?: ContentSecurityPolicyOptionValue;
    connectSrc?: ContentSecurityPolicyOptionValue;
    fontSrc?: ContentSecurityPolicyOptionValue;
    formAction?: ContentSecurityPolicyOptionValue;
    frameAncestors?: ContentSecurityPolicyOptionValue;
    frameSrc?: ContentSecurityPolicyOptionValue;
    imgSrc?: ContentSecurityPolicyOptionValue;
    manifestSrc?: ContentSecurityPolicyOptionValue;
    mediaSrc?: ContentSecurityPolicyOptionValue;
    objectSrc?: ContentSecurityPolicyOptionValue;
    reportTo?: string;
    sandbox?: ContentSecurityPolicyOptionValue;
    scriptSrc?: ContentSecurityPolicyOptionValue;
    scriptSrcAttr?: ContentSecurityPolicyOptionValue;
    scriptSrcElem?: ContentSecurityPolicyOptionValue;
    styleSrc?: ContentSecurityPolicyOptionValue;
    styleSrcAttr?: ContentSecurityPolicyOptionValue;
    styleSrcElem?: ContentSecurityPolicyOptionValue;
    upgradeInsecureRequests?: ContentSecurityPolicyOptionValue;
    workerSrc?: ContentSecurityPolicyOptionValue;
}
interface ReportToOptions {
    group: string;
    max_age: number;
    endpoints: ReportToEndpoint[];
}
interface ReportToEndpoint {
    url: string;
}
interface ReportingEndpointOptions {
    name: string;
    url: string;
}
type overridableHeader = boolean | string;
interface SecureHeadersOptions {
    contentSecurityPolicy?: ContentSecurityPolicyOptions;
    crossOriginEmbedderPolicy?: overridableHeader;
    crossOriginResourcePolicy?: overridableHeader;
    crossOriginOpenerPolicy?: overridableHeader;
    originAgentCluster: overridableHeader;
    referrerPolicy?: overridableHeader;
    reportingEndpoints?: ReportingEndpointOptions[];
    reportTo?: ReportToOptions[];
    strictTransportSecurity?: overridableHeader;
    xContentTypeOptions?: overridableHeader;
    xDnsPrefetchControl?: overridableHeader;
    xDownloadOptions?: overridableHeader;
    xFrameOptions?: overridableHeader;
    xPermittedCrossDomainPolicies?: overridableHeader;
    xXssProtection?: overridableHeader;
}
export declare const NONCE: ContentSecurityPolicyOptionHandler;
export declare const secureHeaders: (customOptions?: Partial<SecureHeadersOptions>) => MiddlewareHandler;
export {};
